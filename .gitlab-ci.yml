variables:
    IMAGE_NAME: 'ims-07-loan-api'
    SERVICE_NAME: 'ims-07-loan-api'
    NETWORK: 'app_net'

stages:
    - pilot
    - dev
    - uat
    - iat
    - prod


pilot-docker:
    stage: pilot
    only:
        - pilot
    tags:
        - pilot
    script:
        - export VERSION=$(date +%Y%m%d_%H%M%S)
        - sh scripts/setprop.sh "spring.profiles.active" "pilot" src/main/resources/application.properties
        - gradle clean bootJar -x test
        - docker build --tag=${IMAGE_NAME}:${VERSION} .
        - S_NAME=$(echo `docker service ls --filter name="${SERVICE_NAME}" --format "{{.Name}}"`)
        - >
            if [ ! -z "${S_NAME}" ]; then
                docker service update --image ${IMAGE_NAME}:${VERSION} ${SERVICE_NAME}
            else
                docker service create --name ${SERVICE_NAME} --replicas 1 --mount type=volume,source=ims_log_data,destination=/app/log --network ${NETWORK} ${IMAGE_NAME}:${VERSION}
            fi


uat-docker:
    stage: uat
    only:
        - uat
    tags:
        - uat
    script:
        - export VERSION=$(date +%Y%m%d_%H%M%S)
        - sh scripts/setprop.sh "spring.profiles.active" "uat" src/main/resources/application.properties
        - gradle clean bootJar -x test
        - docker build --tag=${IMAGE_NAME}:${VERSION} .
        - S_NAME=$(echo `docker service ls --filter name="${SERVICE_NAME}" --format "{{.Name}}"`)
        - >
            if [ ! -z "${S_NAME}" ]; then
                docker service update --image ${IMAGE_NAME}:${VERSION} ${SERVICE_NAME}
            else
                docker service create --name ${SERVICE_NAME} --replicas 1 --mount type=volume,source=ims_log_data,destination=/app/log --network ${NETWORK} ${IMAGE_NAME}:${VERSION}
            fi


iat-docker:
    stage: iat
    only:
        - iat
    tags:
        - iat
    script:
        - export VERSION=$(date +%Y%m%d_%H%M%S)
        - sh scripts/setprop.sh "spring.profiles.active" "iat" src/main/resources/application.properties
        - gradle clean bootJar -x test
        - docker build --tag=${IMAGE_NAME}:${VERSION} .
        - S_NAME=$(echo `docker service ls --filter name="${SERVICE_NAME}" --format "{{.Name}}"`)
        - >
            if [ ! -z "${S_NAME}" ]; then
                docker service update --image ${IMAGE_NAME}:${VERSION} ${SERVICE_NAME}
            else
                docker service create --name ${SERVICE_NAME} --replicas 1 --mount type=volume,source=ims_log_data,destination=/app/log --network ${NETWORK} ${IMAGE_NAME}:${VERSION}
            fi


dev-docker:
    stage: dev
    only:
        - dev
    tags:
        - dev
    script:
        - export VERSION=$(date +%Y%m%d_%H%M%S)
        - sh scripts/setprop.sh "spring.profiles.active" "dev" src/main/resources/application.properties
        - gradle clean bootJar -x test
        - docker build --tag=${IMAGE_NAME}:${VERSION} .
        - S_NAME=$(echo `docker service ls --filter name="${SERVICE_NAME}" --format "{{.Name}}"`)
        - >
            if [ ! -z "${S_NAME}" ]; then
                docker service update --image ${IMAGE_NAME}:${VERSION} ${SERVICE_NAME}
            else
                docker service create --name ${SERVICE_NAME} --replicas 1 --mount type=volume,source=ims_log_data,destination=/app/log --network ${NETWORK} ${IMAGE_NAME}:${VERSION}
            fi


prod-docker:
    stage: prod
    only:
        - main
    tags:
        - prod
    script:
        - export VERSION=$(date +%Y%m%d_%H%M%S)
        - sh scripts/setprop.sh "spring.profiles.active" "prod" src/main/resources/application.properties
        - source /home/gitlab-runner/.bashrc
        - gradle clean bootJar -x test
        - docker build --tag=${IMAGE_NAME}:${VERSION} .
        - S_NAME=$(echo `docker service ls --filter name="${SERVICE_NAME}" --format "{{.Name}}"`)
        - >
            if [ ! -z "${S_NAME}" ]; then
                docker service update --image ${IMAGE_NAME}:${VERSION} ${SERVICE_NAME}
            else
                docker service create --reserve-memory 16G --reserve-cpu 8 --limit-memory 32G --limit-cpu 16 --name ${SERVICE_NAME} --replicas 1 --mount type=volume,source=ims_log_data,destination=/app/log --network ${NETWORK} ${IMAGE_NAME}:${VERSION}
            fi
